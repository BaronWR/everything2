rem *** This program calculates the Interquartile Mean from Node Reputation Data.
rem *** It requires an input file with a format specified below:
rem ***
rem *** One noder per line, containing the following data:
rem *** <noder id>,<noder name>,<XP>,(<node1rep>,<node2rep>....)
rem *** e.g:
rem *** 768243,Professor Pi,12345,(1,3,-2,12,3,4)
rem *** 
rem *** All the individual node reputations are stored in nodelist(10000)
rem *** Next, this data is accumulated into bins (1 bin for each reputation level)
rem *** This is done in the array variable rephist(10000); the reputations are shifted by
rem *** 5000 to take into account negative reputations.
rem *** e.g. a node with reputation 10 will be counted in rephist(5010)
rem *** the IQM is then calculated from the rephist() data.
rem *** No (slow) sorting of reputation data is required.
rem *** 
rem *** I am aware that we can significantly improve this program;
rem *** especially the data parsing into the nodelist() array...
rem *** But focus your attention more on the algorithm of calculating 
rem *** the IQM, in the bottom section of the program

dim nodelist(10000)
dim rephist(10000)
open 1, "IQMin.txt","r"
open 2, "IQMout.txt","a"


print #2 "ID, Name, XP, Nodes, Low Rep, Hi Rep, Rep sum, Mean Rep, IQMsum, IQMpop, IQM"

action=0

while(!eof(1))
	line input #1 a$ 

	action=action+1
	if (action/500=int(action/500)) then
		print action
	endif
	rem *** Like to get some response from my computer, every now and then :-) ***

rem *****************************************
rem get noder ID
rem *****************************************
        text$=""
        count=1         
	while(mid$(a$,count,1)<>",")
        	text$=text$+mid$(a$,count,1)
        	count=count+1
        wend

	print #2 text$, ", ";

rem *****************************************
rem get noder name        
rem *****************************************
        count=count+1
	text$=""
	while(mid$(a$,count,1)<>",")
        	text$=text$+mid$(a$,count,1)
        	count=count+1
        wend

	print #2 text$, ", ";

rem *****************************************
rem get XP
rem *****************************************        
        count=count+1
	text$=""
	while(mid$(a$,count,1)<>",")
        	text$=text$+mid$(a$,count,1)
        	count=count+1
        wend
	print #2 text$, ", ";

rem *****************************************
rem get REPs
rem *****************************************        
        count=count+2
	ncount=0
	nlow=0
        nhi=0
	srep=0
	text$=""
	for count2 = count to len(a$)
		if (mid$(a$,count2,1)<>"," and mid$(a$,count2,1)<>")") then
			text$=text$+mid$(a$,count2,1)
		else
			
			if (text$<>"") then
				ncount=ncount+1
				nodelist(ncount)=val(text$)
				srep=srep+nodelist(ncount)
				if (ncount=1) then
					nlow = nodelist(ncount)
					nhi = nodelist(ncount)
				endif
				if (nodelist(ncount)<nlow) then
					nlow=nodelist(ncount)
				endif
				if (nodelist(ncount)>nhi) then
					nhi=nodelist(ncount)
				endif
				text$=""
			endif
		endif
	next count2

	print #2 ncount,", ",nlow,", ",nhi,", ",srep,", ";
	if (ncount>0) then
		print #2 srep/ncount,", ";
	else
		print #2 "0, ";
	endif

rem *****************************************
rem Calculate IQM
rem *****************************************        

	rem *** clear array from lowest to highest rep
	rem *** (rep=0 is rephist(5000) to avoid negative array counters)
	rem *** this will work for -5000<rep<5000 -- plenty of room!

	for count = (nlow+4999) to (nhi+5000)
		rephist(count)=0
	next count

	rem *** Calculate histogram	
	count = 0
	while (count<ncount)
		count = count+1
		rephist(nodelist(count)+5000)=rephist(nodelist(count)+5000)+1
	wend

	rem *** Transform histogram to cumulative form.
	for count = (nlow+5001) to (nhi+5000)
		rephist(count) = rephist(count) + rephist(count-1)
	next count

	q1bin = 5000
	count = nlow + 5000	
	while (rephist(count) < ncount/4)
		count = count +1
	wend

	q1bin = count
	q3bin = count
	while (rephist(count) < ncount*3/4)
		count = count +1
	wend
	q3bin = count

	IQMsum=0
	for count = q1bin to q3bin
		IQMsum = IQMsum + (rephist(count) - rephist(count-1))*(count-5000)
	next count

	IQMpop = ncount/2
	IQMsum = IQMsum - (ncount/4-rephist(q1bin-1))*(q1bin-5000)
	IQMsum = IQMsum - (rephist(q3bin)-ncount*3/4)*(q3bin-5000)

	if (IQMpop = 0) then
		print #2 "0, 0, 0"
	else
		print  #2 IQMpop,", ",IQMsum,", ",IQMsum/IQMpop
	endif

wend
close 1
close 2
