<node>
  <rawdata_id>335664</rawdata_id>
  <core>0</core>
  <reputation>0</reputation>
  <lockedby_user>0</lockedby_user>
  <createtime>1999-12-22 03:26:43</createtime>
  <locktime>0000-00-00 00:00:00</locktime>
  <totalvotes>0</totalvotes>
  <hits>0</hits>
  <node_id>335664</node_id>
  <type_nodetype>332487</type_nodetype>
  <author_user>315</author_user>
  <package>0</package>
  <datacode>[%
# To use this, you will need to install libgd and GD.pm.
use GD;
use Everything::File;

my $top = $query-&gt;param(&quot;top&quot;);
my $bot = $query-&gt;param(&quot;bottom&quot;);
my $gradH = $query-&gt;param(&quot;gradH&quot;);
my $totalH = $query-&gt;param(&quot;totalH&quot;);

my $file = Everything::File::getInstallDir();

# This is where we want to keep the generated images
$file .= &quot;/images/nodelets/grads/&quot;;

$top ||= &quot;000000&quot;;
$bot ||= &quot;FFFFFF&quot;;
$gradH ||= 20;
$totalH ||= (25 &gt; $gradH) ? 25 : $gradH;

# remove any '#' from the start of the hex string
$top =~ s/^#*//;
$bot =~ s/^#*//;

$top = uc $top;
$bot = uc $bot;

$file .= $top . &quot;-&quot; . $bot . &quot;-&quot; . $totalH . &quot;.png&quot;;

if(-e $file)
{
  $file = new Everything::File($file);
  $file-&gt;read();  
}
else
{
  $top =~ /(..)(..)(..)/; 
  my ($topr, $topg, $topb) = (hex $1, hex $2, hex $3);

  $bot =~ /(..)(..)(..)/;
  my ($botr, $botg, $botb) = (hex $1, hex $2, hex $3);
  my ($deltar, $deltag, $deltab) =
    ($topr - $botr, $topg - $botg, $topb - $botb);

  # create a new image
  my $im = new GD::Image(1,$totalH);

  # allocate some colors
  my $color;
  my $i;
  my ($r, $g, $b);

  for($i = 0; $i &lt; $gradH; $i++)
  {
    $r = int($topr - ($deltar * $i / $gradH));
    $g = int($topg - ($deltag * $i / $gradH));
    $b = int($topb - ($deltab * $i / $gradH));

    $color = $im-&gt;colorAllocate($r, $g, $b);
    $im-&gt;setPixel(0,$i, $color);
  }

  # Fill the rest with the bottom color.
  for($i = $gradH; $i &lt; $totalH; $i++)
  {
    $im-&gt;setPixel(0, $i, $color);
  }

  my $img = $im-&gt;png;

  #createNodeletGradDir();
  {
    my $dir = Everything::File::getInstallDir();
    my $ntdir = $dir . &quot;/images/nodelet/grads&quot;;

    return if(-e $ntdir);

    $dir .= &quot;/images&quot;;
    system(&quot;mkdir $dir&quot;) unless(-e $dir);
    $dir .= &quot;/nodelets&quot;;
    system(&quot;mkdir $dir&quot;) unless(-e $dir);
    $dir .= &quot;/grads&quot;;
    system(&quot;mkdir $dir&quot;) unless(-e $dir);
  }

  # Store the image data in a file so that we don't
  # need to generate it again.
  $file = new Everything::File($file);
  $file-&gt;write($img);

  $img;
}

%]</datacode>
  <title>nodeletgradient</title>
  <datatype>image/png</datatype>
</node>
