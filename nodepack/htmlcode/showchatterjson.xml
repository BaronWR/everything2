<node>
  <createtime>2001-03-05 23:28:39</createtime>
  <totalvotes>0</totalvotes>
  <node_id>1988660</node_id>
  <code>return {} if getId($USER) == $HTMLVARS{guest_user};

if($$VARS{publicchatteroff}) {
	if($query-&gt;param('RemoveEarPlugs') eq '1') {
		delete $$VARS{publicchatteroff};
	} else {
		return '&lt;p&gt;&lt;em&gt;your earplugs are in ('.linkNode($NODE,'remove them',{'RemoveEarPlugs'=&gt;1}).')&lt;/em&gt;&lt;/p&gt;';
	}
}

my $untrueGods = getVars(getNode(&quot;Untrue Gods&quot;,&quot;setting&quot;));

my $useBorgSpeak = 0;
my $messagesToShow = 25;
my $messageInterval = 360; #in seconds, how long room messages remain
my $doAFD2006 = 0 ;
my $frequencyAFD2006 = 5;

my $ignorelist = $DB-&gt;sqlSelectMany('ignore_node', 'messageignore', 'messageignore_id='.$$USER{user_id});
my @list;
while (my ($u) = $ignorelist-&gt;fetchrow) { push @list, $u; }
my $ignoreStr = join(&quot;, &quot;,@list);

my $wherestr = &quot;for_user=0 &quot;; 
$wherestr .= ' and room='.$$USER{in_room} unless ($$VARS{omniphonic});
$wherestr .= &quot; and author_user not in ($ignoreStr)&quot; if $ignoreStr;

my $csr = $DB-&gt;sqlSelectMany('*', 'message use index(foruser_tstamp) ', $wherestr, &quot;order by tstamp desc limit $messagesToShow&quot;);

if($csr-&gt;rows == 0) {
	return htmlcode('borgspeak',$useBorgSpeak);
}

my @msgs;
while(my $MSG = $csr-&gt;fetchrow_hashref) {
	unshift @msgs, $MSG;
}

my $valid = getVars(getNode('egg commands','setting'));
my $UID = getId($USER) || 0;
my $isEDev = exists $HTMLVARS{group_edev}{$$USER{user_id}};

my ($str, $aid, $flags, $userLink, $userLinkApostrophe, $text, $usermessage);
my $jsonList;
my $count = 1;

my $maxLen = htmlcode('chatterSplit');

foreach my $MSG (@msgs) {
	$aid = $$MSG{author_user} || 0;

	if($$MSG{room} != $$USER{in_room}) {
		if($$MSG{room}) {
			my $R = getNodeById($$MSG{room});
			$str.='('.linkNode($R, $$R{abreviation}).')';
		} else {
			$str.='(out)';
		}
	}

	$text = $$MSG{msgtext};
utf8::decode($text);

#	$text =~ s/(\S{25})/$1 /g;
#	$text =~ s/(\S{$maxLen})/$1 /go if $maxLen;	#FIXME look though links and don't split across link targets
	$text = escapeAngleBrackets($text);

	#Close dangling square brackets
 	my $numopenbrackets = ($text =~ tr:\[::);
 	my $numclosebrackets = ($text =~ tr:\]::);
 	while($numclosebrackets &lt; $numopenbrackets){
		$text .= &quot;]&quot;;
 	 	$numclosebrackets++;
 	}

	$text = parseLinks($text,0,1);

	if($doAFD2006) {
		if ($$MSG{message_id} % $frequencyAFD2006 == 0) {
			$text = htmlcode('aprilfools_chatterbox_2006', $text);
		}
	}

#N-Wing, 2006-03-31 - I put this in a while ago, but nobody uses it, so bye
#	#do \n stuff, but easy to abuse, so only let certain people do it
#	$text =~ s/\s+\\n\s+/&lt;br \/&gt;/g if exists $HTMLVARS{group_gods}{$aid};
	my $userTitle = getNodeById($aid)-&gt;{'title'};
	$userTitle =~ s/ /_/g; # replace spaces with underscores in username
	$userLink = &quot;&lt;span class='chat_user chat_$userTitle'&gt;&quot;
		. linkNode( $aid, undef, {'lastnode_id'=&gt;undef}) . &quot;&lt;/span&gt;&quot;;
	$userLinkApostrophe = &quot;&lt;span class='chat_user chat_$userTitle'&gt;&quot;
		. linkNode($aid, getNode($aid)-&gt;{title} . &quot;'s&quot;) . &quot;&lt;/span&gt;&quot;;

	if (htmlcode('isSpecialDate','halloween')) {
		my $aUser = getNodeById($aid, 'light');
		my $costume = getVars($aUser)-&gt;{costume} if (getVars($aUser)-&gt;{costume});
		if ($costume gt '') {
			my $halloweenStr = $$aUser{title}.&quot;|&quot;.encodeHTML($costume);
			$userLink = linkNodeTitle( $halloweenStr, {'lastnode_id'=&gt;undef});
		}
	}




	# Make bones and nate look impressive.
	$userLink =~ s/^(.*)$/&lt;strong&gt;$1&lt;\/strong&gt;/ if ($aid == 220 );

	if($$VARS{powersChatter}) {
    # Separating mere coders from the gods...
    my $isCommitter = htmlcode('isinUsergroup',&quot;$aid,%%&quot;);
    my $notReallyRoot = exists $$untrueGods{$aid};

    my $isChanop = htmlcode('isinUsergroup',&quot;$aid,chanops,1&quot;);

		$flags = '';
		if(exists $HTMLVARS{group_gods}{$aid} &amp;&amp; !$notReallyRoot) {
			$flags .= '@';
		} elsif(exists $HTMLVARS{'group_content editors'}{$aid}) {
			$flags .= '$';
		}

    $flags .= &quot;+&quot; if $isChanop;

    $flags .= '*' if $isCommitter;

		$flags .= '%' if $isEDev &amp;&amp; exists $HTMLVARS{group_edev}{$aid};
		if(length($flags)) {
			$flags = '&lt;small&gt;'.$flags.'&lt;/small&gt; ';
		}
	}

	if ( $text =~ /^\/me(\b)(.*)/i ) {
		$usermessage = '&lt;i&gt;' . $1 . $2 . '&lt;/i&gt;';
		# What do you mean, \me's code is broken? -- eien_meru
	}
	elsif ( $text =~ /^\/me\'s\s(.*)/i ) { #Attempt to match this one before matching the AFD2007 commands.
$userLink = $userLinkApostrophe;
		$usermessage = '&lt;i&gt;' .  $1 . '&lt;/i&gt;';
	}
	elsif ( $text =~ /^\/sings?\s(.*)/i ) { 
		my @notesarray = (&quot;&amp;#9835;&quot;, &quot;&amp;#9834;&quot;, &quot;&amp;#9835;&amp;#9834;&quot;, &quot;&amp;#9834;&amp;#9835;&quot;);
		$usermessage = &quot;&lt;i&gt; $notesarray[int(rand(4))] $1 $notesarray[int(rand(4))]&lt;/i&gt;&quot;;
	}
	##any other names by which you should whisper?
	elsif ($text =~ /(^\/small|^\/aside|^\/whispers?|^\/monologue)(.*)/i){ 
 	    $usermessage = '&lt;small&gt;' . $2 . '&lt;/small&gt;'	    
	}

### dice rolling
 	elsif ( $text =~ /^\/rolls(.*)/i ) {
		if ($text =~ /^\/rolls 1d2 &amp;rarr; 1/i) { 
			$usermessage = '&lt;span style=&quot;font-variant:small-caps&quot;&gt;flips a coin &amp;rarr; heads' . '&lt;/span&gt;'; 
		}
		elsif ($text =~ /^\/rolls 1d2 &amp;rarr; 2/i) { 
			$usermessage = '&lt;span style=&quot;font-variant:small-caps&quot;&gt;flips a coin &amp;rarr; tails' . '&lt;/span&gt;'; 
		}
	 	else { 
			$usermessage = '&lt;span style=&quot;font-variant:small-caps&quot;&gt; rolls ' . $1 . '&lt;/span&gt;'; 
		}
  	}

### fireball messages
 	elsif ( $text =~ /^\/fireballs?\s(.*)/i ) { 
 		$usermessage= '&lt;span style=&quot;font-variant:small-caps&quot;&gt; fireballs ' . $1 . '...&lt;/span&gt;&lt;br&gt;&lt;i&gt;' . linkNodeTitle ($1) . ' BURSTS INTO FLAMES!!!&lt;/i&gt;';
	}
 	elsif ( $text =~ /^\/conflagrates?\s(.*)/i ) { 
		$usermessage= '&lt;span style=&quot;font-variant:small-caps&quot;&gt; fireballs ' . $1 . '...&lt;/span&gt;&lt;br&gt;&lt;i&gt;' . linkNodeTitle ($1) . ' CONFLAGRATES!!!&lt;/i&gt;';
	}
 	elsif ( $text =~ /^\/immolates?\s(.*)/i ) {
	 	$usermessage= '&lt;span style=&quot;font-variant:small-caps&quot;&gt; fireballs ' . $1 . '...&lt;/span&gt;&lt;br&gt;&lt;i&gt;' . linkNodeTitle ($1) . ' IMMOLATES!!!&lt;/i&gt;';
	}
 	elsif ( $text =~ /^\/singes?\s(.*)/i ) {
	 	$usermessage= '&lt;span style=&quot;font-variant:small-caps&quot;&gt; fireballs ' . $1 . '...&lt;/span&gt;&lt;br&gt;&lt;small&gt;' . linkNodeTitle ($1) . ' is slightly singed. *cough*&lt;/small&gt;';
	}
 	elsif ( $text =~ /^\/explodes?\s(.*)/i ) {
	 	$usermessage= '&lt;span style=&quot;font-variant:small-caps&quot;&gt; fireballs ' . $1 . '...&lt;/span&gt;&lt;br&gt;&lt;i&gt;' . linkNodeTitle ($1) . ' EXPLODES INTO PYROTECHNICS!!!&lt;/i&gt;';
  	}
 	elsif ( $text =~ /^\/limn?\s(.*)/i ) {
	 	$usermessage= '&lt;span style=&quot;font-variant:small-caps&quot;&gt; fireballs ' . $1 . '...&lt;/span&gt;&lt;br&gt;&lt;i&gt;' . linkNodeTitle ($1) . ' IS LIMNED IN FLAMES!!!&lt;/i&gt;';
  	}

### Sanctify command

 	elsif ( $text =~ /^\/sanctify?\s(.*)/i ) { 
 		$usermessage= '&lt;span style=&quot;font-variant:small-caps&quot;&gt; raises the hand of benediction...&lt;/span&gt;&lt;br&gt;&lt;i&gt;' . linkNodeTitle ($1) . ' has been SANCTIFIED!&lt;/i&gt;';
	}

### normal egg message

	elsif ( $text =~ /^\/(\S*)\s+(.*)/ ) {
		if ($$valid{lc($1)}) { #Case insensitive match
			my $eggStr = $$valid{$1}.&quot; &quot;.$2.&quot;!&quot;;
			$usermessage= '&lt;span style=&quot;font-variant:small-caps&quot;&gt; ' . $eggStr . '&lt;/span&gt;';
		}
		else {
		$usermessage= $text;
		}
	}

	else {
		$usermessage= $text;
	}
	$$jsonList{$count} = {id =&gt; $$MSG{message_id}, value =&gt; '&amp;lt;'.$userLink . '&amp;gt; ' .$usermessage};
$$jsonList{$$MSG{message_id}} = 1;
$count++;
}

my $notificationJSON = htmlcode('notificationsJSON');
my $fixedNotificationJSON;


while ( my ($key, $value) = each(%$notificationJSON) ) {
	if (ref($notificationJSON-&gt;{$key}) eq &quot;HASH&quot;) {
		my $notificationStr = $notificationJSON-&gt;{$key}-&gt;{&quot;value&quot;};
		$notificationStr =~ s/&lt;br(\s+)?\/?&gt;/ /g;
		$notificationJSON-&gt;{$key}-&gt;{&quot;value&quot;} = &quot;Notifier &quot;.$notificationStr;
	        $fixedNotificationJSON-&gt;{$key+$count-1} =  $notificationJSON-&gt;{$key};
		delete  $notificationJSON-&gt;{$key};
	}
}

#my $finalJSON = {%$fixedNotificationJSON, %$jsonList};
my $finalJSON = {%$jsonList};

return $finalJSON;</code>
  <type_nodetype>4</type_nodetype>
  <author_user>9740</author_user>
  <title>showchatterJSON</title>
</node>
