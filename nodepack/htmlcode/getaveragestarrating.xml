<node>
  <core>0</core>
  <reputation>0</reputation>
  <lockedby_user>0</lockedby_user>
  <createtime>2009-12-11 12:56:41</createtime>
  <locktime>0000-00-00 00:00:00</locktime>
  <totalvotes>0</totalvotes>
  <hits>0</hits>
  <node_id>1988991</node_id>
  <htmlcode_id>1988991</htmlcode_id>
  <checks_arguments>0</checks_arguments>
  <code># Returns the average star rating for a node, over all ratings in the same condition
#  as the current user.
# Returns the average star rating (float) or undef if there have not been enough
#  ratings to find an average. Averages over all ratings made by sessions in the same
#  condition as the current session.
# 
# Parameters:
#  1: node or node_id to get star rating of
#  2 (optional): the minimum number of ratings to get an average (default: 1)

my ($ratedNode, $minRatings) = @_;

$minRatings = 1 if (!$minRatings || $minRatings &lt; 1);

getRef($ratedNode);

my $userCondition = htmlcode('getStarRatingCondition');
my $queryStr = &lt;&lt;SQLEND;
SELECT SUM(rating_value) AS sum, COUNT(rating_value) AS count
  FROM starrating
  WHERE starrating_id = ?
  AND user_condition = ?
SQLEND

my ($sum, $count) =
  $DB-&gt;getDatabaseHandle()-&gt;selectrow_array (
    $queryStr
    , { }
    , $$ratedNode{node_id}, $userCondition
    );

return ($sum / $count) if ($count &gt;= $minRatings);
return undef;
</code>
  <type_nodetype>4</type_nodetype>
  <author_user>1449265</author_user>
  <package>0</package>
  <title>getAverageStarRating</title>
</node>
