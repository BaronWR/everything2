<node>
  <doctext>ok so heres the deal.... i'll make a few versions of this which are slight to moderate variations on &amp;#91;ccunning&amp;#93;s original code...&lt;br /&gt;
&lt;br /&gt;
Firsts lets assume that the stack is FIFO, so the thing goes in reverse chronological order and the @hist&amp;#91;0&amp;#93; is the last thing we were at, &lt;br /&gt;
and @hist&amp;#91;9&amp;#93; is the oldest link&lt;br /&gt;
&lt;br /&gt;
This version allows for dupes in the stack, but not next to each other (so 1, 2, 1, 3 is ok, but 1,1,2,3 is not)&lt;br /&gt;
&lt;pre&gt;
&amp;#91;%&lt;br /&gt;
return '' if getId($USER) == $HTMLVARS{guest_user};&lt;br /&gt;
return '' if (/$$NODE{node_id}/ ~= $$VARS{history}) &amp;amp;&amp;amp; $$VARS{history_nodupes}; #for no-dupes...&lt;br /&gt;
&lt;br /&gt;
#maybe make this a $$VAR? if this isn't iterative it's just a matter of how much storage we want to use...&lt;br /&gt;
my $limit = 10;&lt;br /&gt;
my $current = '&amp;lt;a href=&quot;/index.pl?node_id=' . $$NODE{node_id} . '&quot;&amp;gt;' . $$NODE{title} . '&amp;lt;/a&amp;gt;';&lt;br /&gt;
&lt;br /&gt;
my @links = split(/&amp;lt;br&amp;gt;/, $$VARS{history});&lt;br /&gt;
my $last = @links&amp;#91;0&amp;#93;;&lt;br /&gt;
&lt;br /&gt;
#you can always put the $current on, because if it's the same, it doesn't matter, if it's not, then it's updated...&lt;br /&gt;
if ($last != $current) {&lt;br /&gt;
unshift @links, $current;&lt;br /&gt;
pop @links unless ($#links &amp;lt; $limit);&lt;br /&gt;
}&lt;br /&gt;
&lt;br /&gt;
$$VARS{history} = join('&amp;lt;br&amp;gt;', @links);&lt;br /&gt;
%&amp;#93;
&lt;/pre&gt;
&lt;br /&gt;
&lt;br /&gt;
of course we could always ensure that there are no duplicates by simply comparing the current $$NODE{node_id} to the entire string..&lt;br /&gt;
add this in there...&lt;br /&gt;
Well i think this works...it's something like that ;-)&lt;br /&gt;
if (/$$NODE{node_id}/ ~= $$VARS{history}) { return; } &lt;br /&gt;
&lt;br /&gt;
and to modifiy ccunnings original loop, instead of setting $add = 1, simply do tthe contents of the IF statement below the loop and break out of the&lt;br /&gt;
loop/return. :)&lt;br /&gt;
I know it's trivial time saving, but i was thinking that if JB/nate decided to let us play with our $limit (like say, last 50 or 100 nodes =) this could be a&lt;br /&gt;
time saver,&lt;br /&gt;
especially if we can keep the whole {history} sorted and formatted properly, then it's no extra DB hits, and all we have to do is &lt;br /&gt;$str .=
$$VARS{history} it for the nodelet =)&lt;br /&gt;</doctext>
  <createtime>2001-06-19 07:55:25</createtime>
  <totalvotes>0</totalvotes>
  <node_id>1083613</node_id>
  <edittime>0000-00-00 00:00:00</edittime>
  <type_nodetype>854232</type_nodetype>
  <document_id>1083613</document_id>
  <author_user>451742</author_user>
  <title>last N nodes visited</title>
</node>
