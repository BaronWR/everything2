<node>
  <doctext>// E2 Mobile front-end javascript. -- [call]

// Debug output, to a div named 'output' in the html.
function DEBUG(clear, html)
{
    var output = document.getElementById('output');
    if (output)
        {
            if (clear)
                output.innerHTML = html;
            else
                output.innerHTML += html;
        }
}

// ------------------------------------------------------------

function setPageTabTitle(str)
{
    document.getElementById('page_tab').innerHTML = str;
}

// Find the container that an element targets, and the tab that controls it.
function findTargetContainer(element)
{
    var target = 'page_container';
    var target_tab = 'page_tab';
    if (element == undefined)
        alert(&quot;findTargetContainer: element undefined&quot;);
    var classes;
    if (element.className)
        classes = element.className.split(' ');
    else
        classes = []

    for (var i in classes)
    {
        var m;
        if (m = classes[i].match(/^target_(.*)_container$/))
        {
            /* Link specifies a target. We should set THAT
             * as the target container. */
            target = m[0] + '_container';
            target_tab = m[0] + '_tab';
        }
        else if (classes[i] == 'open_inplace')
        {
            var container = element.parentNode;
            while (container)
            {
                if (m = container.id.match(/^(.*)_container$/))
                {
                    target = container.id;
                    target_tab = m[0] + '_tab';
                    break;
                }
                container = container.parentNode;
            }
        }
    }
    return [document.getElementById(target),
            document.getElementById(target_tab)];
}

// &lt;A&gt; :: onLinkClick: handle click on link.
function onLinkClick(e)
{
    // Clicking a link on the page, don't allow the click to have the
    // usual effect. Instead, load the target within the container.
    if (this.href.match(/^javascript:/))
        return;

    var tt = findTargetContainer (this);
    var target = tt[0];
    var tab = tt[1];
    e.preventDefault();
    var url = this.href;
    if (url.match(/\?/))
        url = url.replace(/\?/, '?mobile_fragment=1&amp;')
    else
        url += '?mobile_fragment=1';
    loadLinkToContainer (target, url);
    clickTab (tab);
    DEBUG (true, 'Redirecting to ' + '&lt;code&gt;' + this.href + '&lt;/code&gt;');
}

// &lt;FORM&gt; :: onFormSubmit: handle submission of form.
function onFormSubmit(e)
{
    var tt = findTargetContainer (this);
    var target = tt[0];
    var tab = tt[1];
    e.preventDefault();
    submitFormToContainer(this, target);
    clickTab(tab);
    DEBUG (true, 'Loading form via &lt;code&gt;' + this.action + '&lt;/code&gt;');
}

// Create an XMLHttpRequest, which will load its result into a given
// container.
function newRequest (container)
{
    req = new XMLHttpRequest();
    req.container = container;

    if (container.active_request)
        container.active_request.abort();
    container.active_request = req;

    req.onreadystatechange = function() {
        if (this.readyState == 4)
        {
            if (this.status == 200)
            {
                setContainerHTML (this.container, this.responseText);
                DEBUG (false, ' &lt;b&gt;Done&lt;/b&gt;');
            }
            else
            {
                if (status.status == undefined)
                {
                    // Undefined status. This probably means we've
                    // tried to load an external site with XMLHttpRequest.
                    // &quot;I want to go to there.&quot; -- Liz Lemon.
                    if (this.fetch_url)
                        location.href = this.fetch_url;
                }
                else
                {
                    this.container.innerHTML = &quot;Error: status = &quot;
                        + status.status;
                }
            }
        }
        else if (this.readyState == 1 || this.readyState == 2)
        {
            this.container.innerHTML = '&lt;i&gt;Waiting...&lt;/i&gt;';
        }
        else if (this.readyState == 3)
        {
            this.container.innerHTML = &quot;&lt;i&gt;Receiving...&lt;/i&gt;&quot;;
        }
    }
    return req;
}


// Recursively collect form INPUT values.
function collectFormInputs(element, array)
{
    if (element.tagName == 'INPUT')
    {
        if (element.type == 'checkbox' || element.type == 'radio')
        {
            if (element.checked)
                array.push(escape(element.name)
                           + '=' + escape(element.value));   
        }
        else
        {
            array.push(escape(element.name) + '=' + escape(element.value));   
        }
    }
    else if (element.tagName == 'TEXTAREA'
             || element.tagName == 'SELECT')
    {
        array.push(escape(element.name) + '=' + escape(element.value));   
    }
    else
        for (var c = 0; c &lt; element.children.length; c++)
            collectFormInputs (element.children[c], array);
}

// Submit a form, targeting a given container.
function submitFormToContainer(form, container)
{
    var data;

    /* Aggregate the data to send. */
    var a = new Array();
    collectFormInputs (form, a);
    a.push('mobile_fragment=1');
    for (var i = 0; i &lt; a.length; i++)
    {
        if (i == 0)
            data = a[i];
        else
            data += '&amp;' + a[i];
    }
    var req = newRequest (container);
    var url = form.action;
    var method = form.method;
    if (!method)
        method = &quot;GET&quot;;
    method = method.toUpperCase();
    DEBUG (true, &quot;Using method &quot; + method);
    if (method == 'GET')
    {
        /* GET method =&gt; place form data in URL */
        if (url.match(/\?/))
            url += '&amp;' + data;
        else
            url += '?' + data;
        data = null;
    }
    req.open(method, url, true);
    if (method == 'POST')
        req.setRequestHeader(&quot;Content-type&quot;,
                             &quot;application/x-www-form-urlencoded&quot;);
    req.send(data);
}

// Set the onClick event handlers of links.
function setLinks(element)
{
    if (element.tagName == 'A')
        element.addEventListener('click', onLinkClick);
    else
        /* Process children */
        for (var c in element.children)
            setLinks(element.children[c]);
}

function setFormActions(element, action)
{
    if (element.tagName == 'FORM')
        element.addEventListener('submit', action);
    else
        /* Process children */
        for (var c in element.children)
            setFormActions(element.children[c], action);
}

// Set a container's HTML contents, and adjust for the fact that it's in a
// container by setting the links and form handlers.
function setContainerHTML (container, html)
{
    container.innerHTML = html;
    setLinks (container);
    setFormActions (container, onFormSubmit);

    if (container.id == 'page_container')
    {
        /* If we're setting the HTML for the 'page' container, we also
         want to set the text of the corresponding tab to any title
         given on the page */
        var a = html.match(/&lt;title&gt;(.*)&lt;\/title&gt;/i);
        if (a &amp;&amp; a[1])
            setPageTabTitle(a[1]);

        a = html.match(/&lt;!--node_id=([0-9]+)--&gt;/);
        if (a &amp;&amp; a[1])
        {
            /* Extract node_id from comment in HTML in fragment
             container */
            document.getElementById('more_container').initial_url
                = '/?node_id=' + a[1] + '&amp;displaytype=listnodelets'
                  + '&amp;mobile_fragment=1';
        }
    }
}

function loadLinkToContainer(container, url)
{
    DEBUG (true, &quot;Loading '&quot; + url + &quot;' to container &quot; + container);
    var req = newRequest(container);
    try
    {
        req.open('GET', url, true);
        req.fetch_url = url;
        req.send();
    }
    catch (err)
    {
        alert (err);
    }
}

function clickTab(e)
{
    var id = e.id.replace(/_tab$/, '');
    var s = '';

    /* Hide all siblings */
    var target_container = document.getElementById (id + '_container');
    if (!target_container)
        alert (&quot;Couldn't find target container.&quot;);
    var parent_container = target_container.parentNode;
    if (!parent_container)
        alert (&quot;Couldn't find parent container for &quot; + target_container 
               + &quot;. Parent is &quot; + parent_container);
    var sibling_containers = parent_container.children;
    for (var i = 0; i &lt; sibling_containers.length; i++)
    {
        if (sibling_containers[i] != target_container
            &amp;&amp; sibling_containers[i].className == 'zen_mobileframe')
            sibling_containers[i].style.display = 'none';
    }
    target_container.style.display = 'block';

    sibling_tabs = e.parentNode.children;
    for (var i = 0; i &lt; sibling_tabs.length; i++)
    {
        if (sibling_tabs[i] != e)
            sibling_tabs[i].className = 'zen_mobiletab';
        else
            sibling_tabs[i].className = 'zen_mobiletab_selected';
    }

    /* Do we have to load an initial page to the container? */
    if (target_container.initial_url)
    {
        loadLinkToContainer (target_container, target_container.initial_url);
        target_container.initial_url = undefined;
    }
}
</doctext>
  <createtime>2011-10-17 22:29:58</createtime>
  <totalvotes>0</totalvotes>
  <node_id>1992495</node_id>
  <edittime>2011-11-01 18:00:54</edittime>
  <type_nodetype>1786405</type_nodetype>
  <document_id>1992495</document_id>
  <author_user>829913</author_user>
  <title>mobile jscript</title>
</node>
